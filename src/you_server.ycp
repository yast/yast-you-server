/**
  
  YOU server configuration

  Author: Cornelius Schumacher <cschum@suse.de>

*/
{
    textdomain "you-server";

    import "Wizard";
    import "Service";
    import "Require";
    import "Directory";
    import "Popup";
    import "Label";
    import "SLP";
    
    boolean server_is_running = true;
    
    list products = [];

    // SLP registration file (located in /etc/slp.reg.d)
    string reg_file = "you.reg";
    // alias for YOU base path (as set in /etc/httpd/you_server.conf)
    string base_path = "/YOU";
    // name for the service
    string service_type = "you.suse";
    // default name for the server
    string server_name = _("Local YOU Server");
    
    Wizard::CreateDialog();

    define void RunSuseConfigApache( boolean enable_you_server ) ``{

	string flags = (string)SCR::Read( .sysconfig.apache2.APACHE_SERVER_FLAGS );

	if ( enable_you_server )
	{
	    // add flag "you_server" to APACHE_SERVER_FLAGS
	    flags = flags + " " + "you_server";
	}
	else	// remove "you_server"
	{
	    list<string> server_flags =  splitstring( flags, " ," );
	    server_flags = maplist( string flag, server_flags, { if ( flag != "you_server" ) return flag; } );
	    flags = mergestring( server_flags, " " );
	}
	SCR::Write( .sysconfig.apache2.APACHE_SERVER_FLAGS, flags ); 

	if( !SCR::Write( .sysconfig.apache2, nil ) ) {
	    Popup::Error( _("Unable to write /etc/sysconfig/apache2") );
	    return;
	}
	if( SCR::Execute( .target.bash, "/sbin/SuSEconfig --module apache2" ) != 0 ) {
	    Popup::Error( _("'SuSEconfig --module apache2' failed.") );
	}
    }

    define void StartYouServer() ``{
	boolean ok = true;
	
	UI::OpenDialog(
		       `opt(`decorated),
		       `VBox(
			     `HBox(
				   `HSpacing(1),
				   `VBox( 
					 `Left( `Label( `id( `state ), _("Starting YOU server...") ) ),
					 `Left( `Label( `id( `details ), _("Initializing...") ) )
					 ),
				   `HSpacing( 1 )
				   )
			     )
		       );

	string help = _("The YOU server requires an HTTP server. The 'apache2' package
will now be installed.");

	if ( !Require::AreAllPackagesInstalled( [ "apache2, apache2-worker" ] ) ) {
	    UI::ChangeWidget( `id(`details), `Value, _("Installing HTTP server...") );
	    UI::RecalcLayout();
    
	    if ( !Require::RequireAndConflict( [ "apache2-worker" ], [], help ) )
	    {
		Popup::Error (_("Failed to install required packages."));
		ok = false;
	    }
	}
	
	if ( ok )
	{
	    UI::ChangeWidget( `id(`details), `Value, _("Adapting configuration...") );
	    UI::RecalcLayout();

	    // add "you_server" to APACHE_SERVER_FLAGS
	    RunSuseConfigApache( true );

	    UI::ChangeWidget( `id(`details), `Value, _("Starting server...") );
	    UI::RecalcLayout();
	    integer exitCode = Service::RunInitScript( "apache2", "restart" );
	    if ( exitCode != 0 ) {
		Popup::Error( _("Error starting apache.") );
	    }   
	}
	UI::CloseDialog();
    }

    define void StopYouServer() ``{

	boolean restart =  Popup::AnyQuestion( _( "Question" ),
					    // text of a popup
					    // user decision required whether to stop or restart
					    _("Do you want to shut down the HTTP Server
(apache2) or restart without
providing the YOU patches directory?"),
					    _("&Restart"),
					    _("S&hut down"),
					       `focus_yes );

	UI::OpenDialog(
		       `opt(`decorated),
		       `VBox(
			     `HBox(
				   `HSpacing(1),
				   `Label( `id( `state ), _("Stopping YOU server...") ),
				   `HSpacing( 1 )
				   )
			     )
		       );


	// remove "you_server" from APACHE_SERVER_FLAGS
	RunSuseConfigApache( false );
	
	if ( restart )
	{
	    Service::RunInitScript( "apache2", "reload" );
	}
	else
	{
	    Service::RunInitScript( "apache2", "stop" );
	}

	UI::CloseDialog();
    }

    define boolean SLPRegistered() ``{
	if ( Service::Status( "slpd" ) == 0
	     && SCR::Read( .target.size,  "/etc/slp.reg.d/" + reg_file ) != -1 )
	    return true;
	else
	    return false;
    }
    
    define boolean EnableSLP() ``{

	string help = _( "The installation of the package 'openslp'
is required.
Install the package now?" );
	
	if ( !Require::AreAllPackagesInstalled( [ "openslp" ] ) )
	{
	    if ( !Require::RequireAndConflict( [ "openslp" ], [], help ) )
	    {
		Popup::Error (_("Failed to install required packages."));
		return false;
	    }
	}

	if ( !server_is_running )
	{
	    Popup::Warning (_("The HTTP server isn't running.
Please start the server first."));
	    return false;  
	}

	boolean success = false;

	map bashResult = (map)SCR::Execute( .target.bash_output, "hostname -f" );
	string host = bashResult[ "stdout" ]:"";

	if ( size(host) != 0 )
	{
	    // SLP register - write file you.reg
	    string service = "service:" + service_type + ":http://" + substring( host, 0, size(host)-1 ) + ",en,65535";
	    success = SLP::RegFile ( service, $[ "basepath":base_path, "name":server_name ], reg_file );
	}   

	if ( success )
	{
	    y2milestone( "Wrote /etc/slp.reg.d/%1", reg_file ); 

	    integer exitCode = Service::RunInitScript( "slpd", "restart" );

	    if ( exitCode != 0 )
		Popup::Error( _("Error starting slpd.") );
	}
	else
	{
	    Popup::Error( _("Error writing SLP registration file") );
	}
	
	if ( SLPRegistered() )
	{
	    UI::ChangeWidget( `id(`slp), `Value, true );
	    return true;
	}
	else
	{
	    UI::ChangeWidget( `id(`slp), `Value, false );
	    return false;
	}
    }
    
    define void DisableSLP() ``{
        // don't stop slpd - but restart after removing the .reg file

	boolean success = SLP::DeRegFile( "/etc/slp.reg.d/" + reg_file ); 

	if ( success )
	{
	    y2milestone( "/etc/slp.reg.d/%1 removed", reg_file );
	    integer exitCode = Service::RunInitScript( "slpd", "restart" );
	}
	else
	{
	    y2error( "Cannot remove /etc/slp.reg.d/%1", reg_file );
	}
	
	if ( SLPRegistered() )
	    UI::ChangeWidget( `id(`slp), `Value, true );
	else
	    UI::ChangeWidget( `id(`slp), `Value, false );
    }
    
    define map ProductDialog( map product ) ``{
	UI::OpenDialog(
		       `opt( `decorated ),
		       `VBox(
			     `VSpacing( 0.3 ),
			     `TextEntry( `id( `name ), _("Product Name"), product[ "name" ]:"" ),
			     `TextEntry( `id( `version ), _("Version"), product[ "version" ]:"" ),
			     `TextEntry( `id( `arch ), _("Architecture"), product[ "arch" ]:"" ),
			     `TextEntry( `id( `url ), _("Synchronization URL"),
					 product[ "url" ]:"" ),
			     `VSpacing( 0.3 ),
			     `HBox(
				   `PushButton( `id( `ok ), `opt( `default ), Label::OKButton() ),
				   `PushButton( `id( `cancel ), Label::CancelButton() )
				   )
			     )
		       );
    
	UI::SetFocus( `name );
    
	symbol ret = (symbol)UI::UserInput();

	if ( ret == `ok ) {
	    product[ "name" ] = (string)UI::QueryWidget( `id( `name ), `Value );
	    product[ "version" ] = (string)UI::QueryWidget( `id( `version ), `Value );
	    product[ "arch" ] = (string)UI::QueryWidget( `id( `arch ), `Value );
	    product[ "url" ] = (string)UI::QueryWidget( `id( `url ), `Value );
	} else {
	    product = nil;
	}

	UI::CloseDialog();
    
	return product;
    }

    define void SyncServer() ``{
	term productLabels = `VBox();

	UI::OpenDialog(
		       `opt(`decorated),
		       `VBox(
			     `HBox(
				   `HSpacing(1),
				   `VBox(
					 `Label( `id( `state ), _("Syncing Server...") ),
					 `Label( `id( `product ), "                   " )
					 ),
				   `HSpacing( 1 )
				   ),
			     `HBox(
				   `PushButton( `id( `close ), Label::CloseButton() )
				   )
			     )
		       );

	integer i = 0;
	while ( i < size( products ) ) {

	    map pm = products[ i ]:$[];
	    string pName = pm[ "name" ]:"";
	    if ( size( pName ) != 0 ) {
		string pVersion = pm[ "version" ]:"";
		string pArch = pm[ "arch" ]:"";
		string pUrl = pm[ "url" ]:"";
		string productName = pName + " " + pVersion + " " + pArch;
		UI::ChangeWidget( `id( `product ), `Value, productName );
		UI::RecalcLayout();

		string cmd = "online_update -G -p " + pName + " -v " + pVersion +
		    " -a " + pArch + " -u " + pUrl;

		y2debug( "%1", cmd );

		SCR::Execute( .target.bash, cmd );
	    }
      
	    i = i + 1;
	}

	UI::ChangeWidget( `id( `state ), `Value, _("Server synced.") );
	UI::RecalcLayout();

	map bashResult = (map)SCR::Execute( .target.bash_output, "date" );
	string lastSync = bashResult[ "stdout" ]:"";
	SCR::Write( .you.config.ServerLastSync, lastSync );
	SCR::Write( .you.config, nil );

	UI::UserInput();
    
	UI::CloseDialog();
    }

    term widget_server_unused =
	`HBox(
	      `Label( _("Server status: unused") ),
	      `HStretch(),
	      `PushButton( `id( `server_control ), _("Start Server") )
	      );

    term widget_server_running =
	`HBox(
	      `Label( _("Server status: running") ),
	      `HStretch(),
	      `PushButton( `id( `server_control ), _("Stop Server") )
	      );

    define void UpdateServerStatus() ``{
	integer httpd_status = Service::Status( "apache2" );
	string sys_you_server = (string)SCR::Read( .sysconfig.apache2.APACHE_SERVER_FLAGS );
	y2milestone ( "Server status: %1 SERVER_FLAGS: %2", httpd_status==0?"running":"unused",
		                                            sys_you_server );
	
	if ( httpd_status == 0
	     && find(sys_you_server, "you_server") != -1 )
	    server_is_running = true;
	else
	    server_is_running = false;

	if ( server_is_running ) {
	    UI::ReplaceWidget( `id( `server_status ), widget_server_running );
	} else {
	    UI::ReplaceWidget( `id( `server_status ), widget_server_unused );
	}
    }

    define void UpdateProductList() ``{
	list items = [];

	integer i = 0;
	while( i < size( products ) ) {
	    map p = products[ i ]:$[];
	    items = add( items, `item( `id( i ), p[ "name" ]:"", p[ "version" ]:"",
				       p[ "arch" ]:"", p[ "url" ]:"" ) );
	    i = i + 1;
	}

	UI::ChangeWidget( `id( `products ), `Items, items );
    }

    define void UpdateLastSync() ``{
	string lastSync = (string)SCR::Read( .you.config.ServerLastSync );
	if ( lastSync == nil || size( lastSync ) == 0 )
	    lastSync = _("No sync up to now.");
	UI::ChangeWidget( `id(`last_sync), `Value, lastSync );
	UI::RecalcLayout();
    }

    define void LoadSettings() ``{
	products = [];
	string settings = (string)SCR::Read( .target.string,
					     "/var/lib/YaST2/you/you_server_settings" );
	list lines = [];
	if ( settings != nil )
	{
	    lines = splitstring( settings, "\n" );
	}
	integer i = 0;
	while( i < size( lines ) ) {
	    list e = splitstring( lines[ i ]:"", ";" );
	    string pname = e[ 0 ]:"";
	    if( size( pname ) != 0 ) {
		map p = $[ "name":e[ 0 ]:"", "version":e[ 1 ]:"", "arch":e[ 2 ]:"",
			   "url":e[ 3 ]:"" ];
		products = add( products, p );
	    }
	    i = i + 1;
	}
    }

    define void SaveSettings() ``{
	string settings = "";
	integer i = 0;
	while( i < size( products ) ) {
	    map p = products[ i ]:$[];
	    string line = p[ "name" ]:"" + ";" + p[ "version" ]:"" + ";" +
		p[ "arch" ]:"" + ";" + p[ "url" ]:"" + "\n";
	    y2internal( "%1", line );
	    settings = settings + line;
	    i = i + 1;
	}
    
	SCR::Write( .target.string, "/var/lib/YaST2/you/you_server_settings",
		    settings );
    }

    define string EditDialog() ``{
	string srv_name = "";
	
	if ( SLPRegistered() )
	{
	    // get the server name if SLP is already registered
	    map attrs = SLP::GetAttrMap ( service_type );
	    srv_name = lookup( attrs, "name", "" );
	}
	
	UI::OpenDialog(
		       `opt( `decorated ),
		       `VBox(
			     `VSpacing( 0.3 ),
			     `TextEntry( `id( `name ), _("Server Name"), srv_name==""?server_name:srv_name ),
			     `VSpacing( 0.3 ),
			     `HBox(
				   `PushButton( `id( `ok ), `opt( `default ), Label::OKButton() ),
				   `PushButton( `id( `cancel ), Label::CancelButton() )
				   )
			     )
		       );
    
	UI::SetFocus( `name );
    
	symbol ret = (symbol)UI::UserInput();

	if ( ret == `ok )
	    srv_name = (string)UI::QueryWidget( `id( `name ), `Value );

	UI::CloseDialog();

	return srv_name;
    }
    
    term contents =
	`VBox(
	      `VSpacing( 1.0 ),
	      `Frame ( _("Server &Control"),
		       `VBox( `VSpacing(0.4),
			      `ReplacePoint( `id( `server_status ), `Empty() ),
			      `VSpacing(0.5),
			      `HBox( `CheckBox( `id( `slp ), `opt(`notify), _("&SLP registration enabled"),
						SLPRegistered()),
				     `HStretch(),
				     `PushButton( `id( `editname), _("Ed&it Name") )
				    ),
			      `VSpacing(0.4)
			      )
		       ),
	      `VSpacing( 0.5 ),
	      `Table( `id( `products ),
		      `header( _("Product"), _("Version"), _("Architecture"),
			       _("Synchronisation URL") ) ),
	      `HBox(
		    `PushButton( `id( `add ), _("&Add") ),
		    `PushButton( `id( `edit ), _("&Edit") ),
		    `HStretch(),
		    `Right(`PushButton( `id( `remove ), _("&Remove")  ))
		    ),
	      `VSpacing( 1.0 ),
	      `Frame( _("Synchronisation"),
		      `VBox(
			    `VSpacing(0.4),
			    `HBox(
				  `Label( _("Last Synchronization: ") ),
				  `HStretch(),
				  `Label( `id(`last_sync), _("10 days ago") )
				  ),
			    `VSpacing( 0.5 ),
			    `HBox(
				  `PushButton( `id( `sync ), "Synchronize now" ),
				  `HStretch(),
				  `PushButton( `id( `setup_sync ), "Setup automatic synchronization" )
				  ),
			    `VSpacing(0.4)
			    )
		      ),
      	      `VSpacing( 1.0 )
	      );
    // help text for the YOU Server Configuration dialog
    string help_text = _("<p>This module is used to setup and control a local YOU
server.</p>")	+
	// help text continues
	_("<p>Enable the SLP registration to announce the YOU server via the 'Service Location Protocol'.");

    Wizard::SetNextButton(`next, Label::CloseButton() );
    Wizard::HideAbortButton();
    Wizard::HideBackButton();

    Wizard::SetContents( _("YaST Online Update Server Configuration"),
			 contents, help_text, false, true );

    UI::ChangeWidget( `id(`setup_sync), `Enabled, false );

    UpdateServerStatus();

    LoadSettings();

    if ( size( products ) == 0 ) {

	UI::OpenDialog(
		       `opt(`decorated),
		       `VBox(
			     `HBox(
				   `HSpacing(1),
				   `Left( `Label( `id( `state ), _("Getting product information...") ) ),
				   `HSpacing( 1 )
				   )
			     )
		       );
	
	map you_info = Pkg::YouStatus();
	products = add( products, $[ "name": lookup( you_info, "product", "unknown"),
				     "version": lookup( you_info, "version", "unknown" ),
				     "arch": lookup( you_info, "basearch", "unknown" ),
				     "url": "ftp://ftp.suse.com/pub/suse" ] );

	UI::CloseDialog();
	y2debug( "Product information: %1", you_info );
    }

    UpdateProductList();
    UpdateLastSync();

    symbol ret = `next;

    repeat {

	ret = (symbol)UI::UserInput();

	if ( ret == `server_control ) {
	    if ( server_is_running ) {
		StopYouServer();
	    } else {
		StartYouServer();
	    }
	    UpdateServerStatus();
	} else if ( ret == `slp ) {
	    if ( (boolean) UI::QueryWidget(`id(`slp), `Value) ) {
		// check whether package "openslp" is installed and start slpd
		EnableSLP();
	    }
	    else {
		// stop slpd
		DisableSLP();
	    }
	} else if ( ret == `sync ) {
	    SyncServer();
	    UpdateLastSync();
	} else if ( ret == `add ) {
	    map product = ProductDialog( $[] );
	    if ( product != nil ) products = add( products, product );
	    UpdateProductList();
	} else if ( ret == `edit ) {
	    integer current = (integer)UI::QueryWidget( `id(`products), `CurrentItem );
	    map product = ProductDialog( products[ current ]:$[] );
	    if ( product != nil ) products[ current ] = product;
	    UpdateProductList();
	    UI::ChangeWidget( `id(`products), `CurrentItem, current );
	} else if ( ret == `remove ) {
	    integer current = (integer)UI::QueryWidget( `id(`products), `CurrentItem );
	    products = remove( products, current );
	    UpdateProductList();
	    if ( current >= size( products ) ) current = size( products ) - 1;
	    UI::ChangeWidget( `id(`products), `CurrentItem, current );
	} else if ( ret == `editname ) {
	    server_name = EditDialog();
	    // if SLP is already enabled, rewrite you.reg and restart lpsd
	    if ( SLPRegistered() )
		EnableSLP();
	}

    } until ( ret == `next || ret == `cancel  || ret == `abort );

    SaveSettings();

    UI::CloseDialog();

    return ret;
}
